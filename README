# 2log - Daily Note Logger for Obsidian

A TypeScript command-line tool that appends timestamped log entries to your daily Obsidian notes. Perfect for quick journaling and maintaining a continuous log of your daily activities.

## Features

- **Quick logging**: Simple command to add timestamped entries
- **Obsidian integration**: Works seamlessly with markdown daily notes
- **Auto-creation**: Creates daily notes if they don't exist
- **Smart positioning**: Always adds entries under the `## Today` header
- **TypeScript safety**: Type-safe code for reliable operation and easy extension
- **Error handling**: Comprehensive error messages and validation

## Installation

### Prerequisites

- Node.js (version 14 or higher)
- npm

### Setup

1. **Clone or create the project directory:**
   ```bash
   mkdir 2log-tool
   cd 2log-tool
   ```

2. **Initialize npm project:**
   ```bash
   npm init -y
   ```

3. **Install dependencies:**
   ```bash
   npm install --save-dev typescript @types/node
   ```

4. **Create configuration files:**
   
   Save the `package.json` and `tsconfig.json` from the setup artifacts, then save the main script as `2log.ts`.

5. **Build the project:**
   ```bash
   npm run build
   ```

6. **Make executable:**
   ```bash
   chmod +x 2log.js
   ```

7. **Optional - Create global command:**
   ```bash
   sudo ln -s $(pwd)/2log.js /usr/local/bin/2log
   ```

## Usage

### Basic Usage

```bash
# Add a simple log entry
2log "Had a productive morning call"

# Multi-word entries
2log "Meeting with Sarah - discussed project timeline"

# Get help
2log --help
```

### Output Format

Entries are added in the format:
```markdown
- HH:mm Your message here
```

For example:
```markdown
## Today

- 09:30 Had a productive morning call
- 14:15 Meeting with Sarah - discussed project timeline
- 16:45 Finished reading chapter 3
```

### Daily Note Structure

The tool expects and creates daily notes with this structure:

```markdown
# YYYY-MM-DD

## Today

(your log entries appear here)
```

## Configuration

### Default Settings

- **Journal Directory**: `$HOME/Documents/ThirdTime/Journal`
- **Daily Note Format**: `YYYY-MM-DD.md`
- **Entry Format**: `- HH:mm <message>`
- **Target Header**: `## Today`

### Customizing the Journal Directory

To change the default directory, edit the `DEFAULT_CONFIG` in `2log.ts`:

```typescript
const DEFAULT_CONFIG: LoggerConfig = {
  journalDir: process.env.HOME + '/your/custom/path',
  // ... other settings
};
```

## Development

### npm Scripts

```bash
# Build the TypeScript
npm run build

# Watch mode for development
npm run dev

# Build and make executable
npm run build-and-link

# Test the built script
npm start "Test message"
```

### Project Structure

```
2log-tool/
├── 2log.ts          # Main TypeScript source
├── 2log.js          # Compiled JavaScript (generated)
├── package.json     # Project configuration
├── tsconfig.json    # TypeScript configuration
└── README.md        # This file
```

## Enhanced Features

### Type Safety Features
- **Interfaces**: `LoggerConfig` for configuration management
- **Custom Error Types**: `Logger2Error` with specific error categories
- **Proper typing**: All functions have explicit return types for better IDE support

### Better Error Handling
- **Specific error types**: Directory not found, header not found, file write errors
- **Helpful error messages**: More descriptive feedback with suggestions
- **Validation**: Checks directory exists and is writable before attempting operations

### Extensibility
- **Configuration interface**: Easy to add new config options
- **Modular design**: Functions can be reused in other projects
- **Export capability**: Can be imported as a module in other TypeScript projects

### Enhanced User Experience
- **Help command**: `2log --help` or `2log -h` shows usage information
- **Better feedback**: Shows when new files are created
- **Input validation**: Prevents empty messages and provides clear error messages

## Error Messages

The tool provides helpful error messages for common issues:

- **Directory not found**: Suggests creating the journal directory
- **Header not found**: Reminds you to add the `## Today` header to existing notes
- **Permission issues**: Indicates when the directory isn't writable
- **Invalid arguments**: Helps with correct usage syntax

## Integration with Self Anthropology

This tool is designed to work perfectly with self-anthropology practices as described in your documentation. You can use it to:

- **Track daily routines**: Quick logs of habits and activities
- **Record emotional responses**: Note feelings and triggers throughout the day
- **Document social interactions**: Log conversations and their outcomes
- **Monitor goal progress**: Track daily progress on objectives
- **Capture reflections**: Store insights and realizations as they occur

### Example Self-Anthropology Usage

```bash
# Morning routine tracking
2log "Started day with 10min meditation - felt centered"

# Emotional tracking
2log "Felt anxious before presentation, but deep breathing helped"

# Social interaction logging
2log "Good conversation with Alex - I listened more than usual"

# Goal progress
2log "Completed 30min coding practice - building consistency"

# Reflection capture
2log "Realized I'm more productive in morning hours"
```

## Troubleshooting

### Common Issues

1. **"Cannot find module 'fs'"**
   - Ensure you've installed `@types/node`: `npm install --save-dev @types/node`

2. **"Property 'padStart' does not exist"**
   - Update your `tsconfig.json` target to `ES2020` or higher

3. **"Journal directory does not exist"**
   - Create the directory: `mkdir -p $HOME/Documents/ThirdTime/Journal`
   - Or update the path in the configuration

4. **"Could not find '## Today' header"**
   - Add the header to your existing daily note manually
   - Or let the tool create a new note with the proper structure

### Development Tips

- Use `npm run dev` for watch mode during development
- The tool exports functions for use in other TypeScript projects
- Error types are defined for easy extension of error handling
- Configuration is centralized in the `DEFAULT_CONFIG` object

## Contributing

This tool is designed to be easily extensible. Some ideas for future enhancements:

- Custom timestamp formats
- Multiple header support
- Template customization
- Integration with different note structures
- Mood tracking with emoji support
- Tag-based categorization

## License

MIT License - feel free to modify and distribute as needed.